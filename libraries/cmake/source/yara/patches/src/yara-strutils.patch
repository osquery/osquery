diff --git a/libyara/grammar.c b/libyara/grammar.c
index 61e7c7ff..8980198d 100644
--- a/libyara/grammar.c
+++ b/libyara/grammar.c
@@ -2776,19 +2776,19 @@ yyreduce:
         switch((yyvsp[0].expression).type)
         {
           case EXPRESSION_TYPE_INTEGER:
-            strlcpy((yyval.c_string), "i", YR_MAX_FUNCTION_ARGS);
+            yara_strlcpy((yyval.c_string), "i", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_FLOAT:
-            strlcpy((yyval.c_string), "f", YR_MAX_FUNCTION_ARGS);
+            yara_strlcpy((yyval.c_string), "f", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_BOOLEAN:
-            strlcpy((yyval.c_string), "b", YR_MAX_FUNCTION_ARGS);
+            yara_strlcpy((yyval.c_string), "b", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_STRING:
-            strlcpy((yyval.c_string), "s", YR_MAX_FUNCTION_ARGS);
+            yara_strlcpy((yyval.c_string), "s", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_REGEXP:
-            strlcpy((yyval.c_string), "r", YR_MAX_FUNCTION_ARGS);
+            yara_strlcpy((yyval.c_string), "r", YR_MAX_FUNCTION_ARGS);
             break;
           case EXPRESSION_TYPE_UNKNOWN:
             yr_free((yyval.c_string));
@@ -2818,19 +2818,19 @@ yyreduce:
           switch((yyvsp[0].expression).type)
           {
             case EXPRESSION_TYPE_INTEGER:
-              strlcat((yyvsp[-2].c_string), "i", YR_MAX_FUNCTION_ARGS);
+              yara_strlcat((yyvsp[-2].c_string), "i", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_FLOAT:
-              strlcat((yyvsp[-2].c_string), "f", YR_MAX_FUNCTION_ARGS);
+              yara_strlcat((yyvsp[-2].c_string), "f", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_BOOLEAN:
-              strlcat((yyvsp[-2].c_string), "b", YR_MAX_FUNCTION_ARGS);
+              yara_strlcat((yyvsp[-2].c_string), "b", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_STRING:
-              strlcat((yyvsp[-2].c_string), "s", YR_MAX_FUNCTION_ARGS);
+              yara_strlcat((yyvsp[-2].c_string), "s", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_REGEXP:
-              strlcat((yyvsp[-2].c_string), "r", YR_MAX_FUNCTION_ARGS);
+              yara_strlcat((yyvsp[-2].c_string), "r", YR_MAX_FUNCTION_ARGS);
               break;
             case EXPRESSION_TYPE_UNKNOWN:
               result = ERROR_WRONG_TYPE;
diff --git a/libyara/hex_lexer.c b/libyara/hex_lexer.c
index dfe5a921..242a983b 100644
--- a/libyara/hex_lexer.c
+++ b/libyara/hex_lexer.c
@@ -1106,7 +1106,7 @@ YY_RULE_SETUP
 #line 98 "hex_lexer.l"
 {
 
-  yylval->integer = xtoi(yytext);
+  yylval->integer = yara_xtoi(yytext);
   return _BYTE_;
 }
 	YY_BREAK
@@ -1116,7 +1116,7 @@ YY_RULE_SETUP
 {
 
   yytext[1] = '0'; // replace ? by 0
-  yylval->integer = xtoi(yytext) | 0xF000 ;
+  yylval->integer = yara_xtoi(yytext) | 0xF000 ;
   return _MASKED_BYTE_;
 }
 	YY_BREAK
@@ -1126,7 +1126,7 @@ YY_RULE_SETUP
 {
 
   yytext[0] = '0'; // replace ? by 0
-  yylval->integer = xtoi(yytext) | 0x0F00 ;
+  yylval->integer = yara_xtoi(yytext) | 0x0F00 ;
   return _MASKED_BYTE_;
 }
 	YY_BREAK
@@ -2440,7 +2440,7 @@ void yyerror(
   {
     lex_env->last_error = ERROR_INVALID_HEX_STRING;
 
-    strlcpy(
+    yara_strlcpy(
         lex_env->last_error_message,
         error_message,
         sizeof(lex_env->last_error_message));
@@ -2492,7 +2492,7 @@ int yr_parse_hex_string(
 
   if (lex_env.last_error != ERROR_SUCCESS)
   {
-    strlcpy(error->message, lex_env.last_error_message, sizeof(error->message));
+    yara_strlcpy(error->message, lex_env.last_error_message, sizeof(error->message));
     return lex_env.last_error;
   }
 
diff --git a/libyara/include/yara/compiler.h b/libyara/include/yara/compiler.h
index c1623c7d..7a57f74c 100644
--- a/libyara/include/yara/compiler.h
+++ b/libyara/include/yara/compiler.h
@@ -273,7 +273,7 @@ typedef struct _YR_COMPILER
 } YR_COMPILER;
 
 #define yr_compiler_set_error_extra_info(compiler, info) \
-  strlcpy(                                               \
+  yara_strlcpy(                                               \
       compiler->last_error_extra_info,                   \
       info,                                              \
       sizeof(compiler->last_error_extra_info));
diff --git a/libyara/include/yara/strutils.h b/libyara/include/yara/strutils.h
index c4b84d7e..45f6fa6c 100644
--- a/libyara/include/yara/strutils.h
+++ b/libyara/include/yara/strutils.h
@@ -74,14 +74,14 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #define strncasecmp _strnicmp
 #endif
 
-uint64_t xtoi(const char* hexstr);
+uint64_t yara_xtoi(const char* hexstr);
 
-#if !HAVE_STRLCPY && !defined(strlcpy)
-size_t strlcpy(char* dst, const char* src, size_t size);
+#if !HAVE_STRLCPY && !defined(yara_strlcpy)
+size_t yara_strlcpy(char* dst, const char* src, size_t size);
 #endif
 
-#if !HAVE_STRLCAT && !defined(strlcat)
-size_t strlcat(char* dst, const char* src, size_t size);
+#if !HAVE_STRLCAT && !defined(yara_strlcat)
+size_t yara_strlcat(char* dst, const char* src, size_t size);
 #endif
 
 #if !HAVE_MEMMEM && !defined(memmem)
@@ -92,10 +92,10 @@ void* memmem(
     size_t needle_size);
 #endif
 
-int strnlen_w(const char* w_str);
+int yara_strnlen_w(const char* w_str);
 
-int strcmp_w(const char* w_str, const char* str);
+int yara_strcmp_w(const char* w_str, const char* str);
 
-size_t strlcpy_w(char* dst, const char* w_src, size_t n);
+size_t yara_strlcpy_w(char* dst, const char* w_src, size_t n);
 
 #endif
diff --git a/libyara/lexer.c b/libyara/lexer.c
index 08da222a..2bb08fd3 100644
--- a/libyara/lexer.c
+++ b/libyara/lexer.c
@@ -1694,7 +1694,7 @@ YY_RULE_SETUP
     }
     else
     {
-      strlcpy(buffer, current_file_name, sizeof(buffer));
+      yara_strlcpy(buffer, current_file_name, sizeof(buffer));
       s = strrchr(buffer, '/');
 
       #ifdef _MSC_VER
@@ -1713,7 +1713,7 @@ YY_RULE_SETUP
         f = s + 1;
         #endif
 
-        strlcpy(f, yyextra->lex_buf, sizeof(buffer) - (f - buffer));
+        yara_strlcpy(f, yyextra->lex_buf, sizeof(buffer) - (f - buffer));
         include_path = buffer;
       }
       else
@@ -2160,7 +2160,7 @@ YY_RULE_SETUP
       s->flags |= SIZED_STRING_FLAGS_DOT_ALL;
 
     *yyextra->lex_buf_ptr = '\0';
-    strlcpy(s->c_string, yyextra->lex_buf, s->length + 1);
+    yara_strlcpy(s->c_string, yyextra->lex_buf, s->length + 1);
 
     yylval->sized_string = s;
   }
@@ -2247,7 +2247,7 @@ YY_RULE_SETUP
 
   alloc_sized_string(s, strlen(yytext));
 
-  strlcpy(s->c_string, yytext, s->length + 1);
+  yara_strlcpy(s->c_string, yytext, s->length + 1);
   yylval->sized_string = s;
 
   return _HEX_STRING_;
diff --git a/libyara/modules/pe/pe.c b/libyara/modules/pe/pe.c
index e2c4e1aa..32dfe5c1 100644
--- a/libyara/modules/pe/pe.c
+++ b/libyara/modules/pe/pe.c
@@ -605,20 +605,20 @@ static void pe_parse_version_info(PIMAGE_RESOURCE_DATA_ENTRY rsrc_data, PE* pe)
   if (!fits_in_pe(pe, version_info->Key, sizeof("VS_VERSION_INFO") * 2))
     return;
 
-  if (strcmp_w(version_info->Key, "VS_VERSION_INFO") != 0)
+  if (yara_strcmp_w(version_info->Key, "VS_VERSION_INFO") != 0)
     return;
 
   version_info = ADD_OFFSET(version_info, sizeof(VERSION_INFO) + 86);
 
   while (fits_in_pe(pe, version_info->Key, sizeof("VarFileInfo") * 2) &&
-         strcmp_w(version_info->Key, "VarFileInfo") == 0 &&
+         yara_strcmp_w(version_info->Key, "VarFileInfo") == 0 &&
          yr_le16toh(version_info->Length) != 0)
   {
     version_info = ADD_OFFSET(version_info, yr_le16toh(version_info->Length));
   }
 
   while (fits_in_pe(pe, version_info->Key, sizeof("StringFileInfo") * 2) &&
-         strcmp_w(version_info->Key, "StringFileInfo") == 0 &&
+         yara_strcmp_w(version_info->Key, "StringFileInfo") == 0 &&
          yr_le16toh(version_info->Length) != 0)
   {
     PVERSION_INFO string_table = ADD_OFFSET(
@@ -632,7 +632,7 @@ static void pe_parse_version_info(PIMAGE_RESOURCE_DATA_ENTRY rsrc_data, PE* pe)
     {
       PVERSION_INFO string = ADD_OFFSET(
           string_table,
-          sizeof(VERSION_INFO) + 2 * (strnlen_w(string_table->Key) + 1));
+          sizeof(VERSION_INFO) + 2 * (yara_strnlen_w(string_table->Key) + 1));
 
       string_table = ADD_OFFSET(string_table, yr_le16toh(string_table->Length));
 
@@ -643,15 +643,15 @@ static void pe_parse_version_info(PIMAGE_RESOURCE_DATA_ENTRY rsrc_data, PE* pe)
         if (yr_le16toh(string->ValueLength) > 0)
         {
           char* string_value = (char*) ADD_OFFSET(
-              string, sizeof(VERSION_INFO) + 2 * (strnlen_w(string->Key) + 1));
+              string, sizeof(VERSION_INFO) + 2 * (yara_strnlen_w(string->Key) + 1));
 
           if (wide_string_fits_in_pe(pe, string_value))
           {
             char key[64];
             char value[256];
 
-            strlcpy_w(key, string->Key, sizeof(key));
-            strlcpy_w(value, string_value, sizeof(value));
+            yara_strlcpy_w(key, string->Key, sizeof(key));
+            yara_strlcpy_w(value, string_value, sizeof(value));
 
             set_string(value, pe->object, "version_info[%s]", key);
           }
@@ -2207,7 +2207,7 @@ define_function(imphash)
     if (!dll_name)
       return ERROR_INSUFFICIENT_MEMORY;
 
-    strlcpy(dll_name, dll->name, dll_name_len + 1);
+    yara_strlcpy(dll_name, dll->name, dll_name_len + 1);
 
     func = dll->functions;
 
diff --git a/libyara/re_lexer.c b/libyara/re_lexer.c
index bf5520f3..1bd68a37 100644
--- a/libyara/re_lexer.c
+++ b/libyara/re_lexer.c
@@ -2840,7 +2840,7 @@ void yyerror(
   {
     lex_env->last_error = ERROR_INVALID_REGULAR_EXPRESSION;
 
-    strlcpy(
+    yara_strlcpy(
         lex_env->last_error_message,
         error_message,
         sizeof(lex_env->last_error_message));
@@ -2882,7 +2882,7 @@ int yr_parse_re_string(
     yr_re_ast_destroy(*re_ast);
     *re_ast = NULL;
 
-    strlcpy(
+    yara_strlcpy(
         error->message,
         lex_env.last_error_message,
         sizeof(error->message));
diff --git a/libyara/strutils.c b/libyara/strutils.c
index 3b086c54..ca7f13a5 100644
--- a/libyara/strutils.c
+++ b/libyara/strutils.c
@@ -31,7 +31,7 @@ SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 #include <string.h>
 #include <yara/strutils.h>
 
-uint64_t xtoi(const char* hexstr)
+uint64_t yara_xtoi(const char* hexstr)
 {
   size_t i;
   size_t l = strlen(hexstr);
@@ -85,9 +85,9 @@ the following implementations were taken from OpenBSD.
 
 */
 
-#if !HAVE_STRLCPY && !defined(strlcpy)
+#if !HAVE_STRLCPY && !defined(yara_strlcpy)
 
-size_t strlcpy(char* dst, const char* src, size_t size)
+size_t yara_strlcpy(char* dst, const char* src, size_t size)
 {
   register char* d = dst;
   register const char* s = src;
@@ -122,9 +122,9 @@ size_t strlcpy(char* dst, const char* src, size_t size)
 #endif
 
 
-#if !HAVE_STRLCAT && !defined(strlcat)
+#if !HAVE_STRLCAT && !defined(yara_strlcat)
 
-size_t strlcat(char* dst, const char* src, size_t size)
+size_t yara_strlcat(char* dst, const char* src, size_t size)
 {
   register char* d = dst;
   register const char* s = src;
@@ -159,7 +159,7 @@ size_t strlcat(char* dst, const char* src, size_t size)
 #endif
 
 
-int strnlen_w(const char* w_str)
+int yara_strnlen_w(const char* w_str)
 {
   int len = 0;
 
@@ -173,7 +173,7 @@ int strnlen_w(const char* w_str)
 }
 
 
-int strcmp_w(const char* w_str, const char* str)
+int yara_strcmp_w(const char* w_str, const char* str)
 {
   while (*str != 0 && w_str[0] == *str && w_str[1] == 0)
   {
@@ -190,7 +190,7 @@ int strcmp_w(const char* w_str, const char* str)
 }
 
 
-size_t strlcpy_w(char* dst, const char* w_src, size_t n)
+size_t yara_strlcpy_w(char* dst, const char* w_src, size_t n)
 {
   register char* d = dst;
   register const char* s = w_src;
